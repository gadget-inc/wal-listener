version: '3.9'

volumes:
    postgresql_primary:
    postgresql_replica:

x-postgres-common:
  &postgres-common
  image: postgres:15-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U postgres --dbname=test_db'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  postgres_primary:
    <<: *postgres-common
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: test_db
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=logical
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c max_logical_replication_workers=10
      -c max_worker_processes=20
    volumes:
      - postgresql_primary:/var/lib/postgresql/data
      - ./scripts/integration:/docker-entrypoint-initdb.d

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: test_db
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=logical
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c max_logical_replication_workers=10
      -c max_worker_processes=20
    volumes:
      - postgresql_replica:/var/lib/postgresql/data
      - ./scripts/integration:/docker-entrypoint-initdb.d

  wal_listener:
    build:
      context: ../.
      dockerfile: ./Dockerfile
    volumes:
      - ./config-integration.yml:/app/config.yml
    depends_on:
      postgres_primary:
        condition: service_healthy
      postgres_replica:
        condition: service_healthy
    environment:
      - WAL_LISTENER_DB_PASSWORD=postgres
